{"version":3,"sources":["logo.svg","serviceWorker.js","app.py.js","pyodideUtils.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","pyImports","style","logo","react","pythonCode","pyPromises","execute","Promise","all","languagePluginLoader","then","env","pyodide","newEnv","setdefault","setCurrentPackage","packages","runPython","Object","entries","forEach","name","p","setPackages","ReactDOM","render","React","createElement","useState","app","setApp","useEffect","appPromise","resolvedApp","App","val","className","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iGAAAA,EAAOC,QAAU,IAA0B,kC,uICYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iDCdAC,EAAY,GAElBA,EAAU,qBAAuB,CAAEC,WACnCD,EAAU,oBAAsB,CAAEE,UAClCF,EAAS,MAAYG,EACrB,ICO4BC,EAAYJ,EAAWK,EDIpCC,GCJaF,EDPhB,sjBCO4BJ,EDGJA,ECHeK,EDXhC,GCYRE,QAAQC,IAAR,CAAaZ,OAAOa,sBAApB,mBAA6CJ,KAAaK,MAAK,WAClE,IAAMC,EAAMf,OAAOgB,QAAQC,SAI3B,OAtByB,SAACF,GAC9BA,EAAIG,WAAW,WAAY,eAC3BH,EAAIG,WAAW,cAAe,eAiB1BC,CAAkBJ,GAdC,SAACA,EAAKK,GAC7BpB,OAAOgB,QAAQK,UAAU,aAAcN,GACvCO,OAAOC,QAAQH,GAAUI,SACrB,YAAgB,IAAD,mBAAbC,EAAa,KAAPC,EAAO,KACXX,EAAIG,WAAW,UAAWQ,GAC1B1B,OAAOgB,QAAQK,UAAf,uBAAyCI,EAAzC,gBAA6DV,GAC7Df,OAAOgB,QAAQK,UAAf,cAAwCN,MAS5CY,CAAYZ,EAAKX,GACjBJ,OAAOgB,QAAQK,UAAUb,EAAYO,GAC9Bf,OAAOgB,QAAQK,UAAU,YAAaN,OCMrDa,IAASC,OACLC,IAAMC,eAtBI,WAAO,IAAD,EACMC,mBAAS,IADf,mBACTC,EADS,KACJC,EADI,KAShB,OANAC,qBAAU,WACNC,EAAWtB,MAAK,YAA2B,IAAnBuB,EAAkB,EAAvBC,IACfJ,EAAO,CAACK,IAAKF,SAElB,IAECJ,EAAIM,IACGT,IAAMC,cAAcE,EAAIM,IAAK,IAGpC,yBAAKC,UAAU,OACX,4BAAQA,UAAW,cACf,qDAOe,IAC3BC,SAASC,eAAe,SHqGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.224af414.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.e987efba.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { executeFile } from './pyodideUtils';\nimport style from './style.css';\nimport logo from './logo.svg';\nimport * as react from 'react';\nconst pyImports = {};\nconst pyPromises = [];\npyImports['pythonreact.style'] = { style };\npyImports['pythonreact.logo'] = { logo };\npyImports['react'] = react;\nconst PYTHON = `\n\nimport react\nfrom .logo import logo\nfrom .style import style as _\n\ndef App(props, ref):\n    return react.createElement('div', {'className': 'App'}, react.createElement('header', {'className': 'App-header'}, react.createElement('img', {'src': logo, 'className': 'App-logo', 'alt': 'logo'}), react.createElement('p', {}, 'Edit ', react.createElement('code', {}, 'src/App.pyx'), ' and save to reload.'), react.createElement('a', {'className': 'App-link', 'href': 'https://reactjs.org', 'target': '_blank', 'rel': 'noopener noreferrer'}, 'Learn React')))\n\n`;\nconst execute = executeFile(PYTHON, pyImports, pyPromises);\nexport default execute;\n","export const setCurrentPackage = (env) => {\n    env.setdefault('__name__', 'pythonreact')\n    env.setdefault('__package__', 'pythonreact')\n}\n\nexport const setPackages = (env, packages) => {\n    window.pyodide.runPython('import sys', env)\n    Object.entries(packages).forEach(\n        ([name, p]) => {\n            env.setdefault('package', p)\n            window.pyodide.runPython(`sys.modules['${name}'] = package`, env)\n            window.pyodide.runPython(`del package`, env)\n        }\n    )\n}\n\nexport const executeFile = (pythonCode, pyImports, pyPromises) => {\n    return Promise.all([window.languagePluginLoader, ...pyPromises]).then(() => {\n        const env = window.pyodide.newEnv();\n        setCurrentPackage(env)\n        setPackages(env, pyImports)\n        window.pyodide.runPython(pythonCode, env)\n        return window.pyodide.runPython('globals()', env)\n    })\n}","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nimport appPromise from './app.py.js';\n\nconst Index = () => {\n    const [app, setApp] = useState({});\n\n    useEffect(() => {\n        appPromise.then(({ App: resolvedApp }) => {\n            setApp({val: resolvedApp})\n        })\n    }, [])\n\n    if (app.val) {\n        return React.createElement(app.val, {})\n    }\n    return (\n        <div className=\"App\">\n            <header className={'App-header'}>\n                <p>Loading python ...</p>\n            </header>\n        </div>\n    );\n}\n\nReactDOM.render(\n    React.createElement(Index, {}),\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}